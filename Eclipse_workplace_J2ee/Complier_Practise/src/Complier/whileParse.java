/* Generated By:JavaCC: Do not edit this line. whileParse.java */
package Complier;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

@SuppressWarnings("all")
public class whileParse implements whileParseConstants {
	public static int count = 0; /*��Ԫʽ���*/

	public static int ncount = 0; /*��ʱ�����±�*/

	public static List<struct> aList = new ArrayList<struct>();// ----------�����Ԫʽ

	// ---------------��Ԫʽ����------------------
	public static class struct {
		int num;
		String operate;
		String obj1;
		String obj2;
		String situ;

		public struct(int _num, String _operate, String _obj1, String _obj2, String _situ) {
			this.num = _num;
			this.operate = _operate;
			this.obj1 = _obj1;
			this.obj2 = _obj2;
			this.situ = _situ;

		}

		@Override
		public String toString() {
			return "(" + this.num + ")" + " " + "(" + this.operate + "," + " " + this.obj1 + ", " + this.obj2 + ", " + this.situ + ")";
		}
	}

	public static void main(String args[]) throws ParseException, IOException {

		FileInputStream fileStream = null;
		BufferedWriter bw = null;
		String str;

		// ----------��test.txt�ļ���ȡ��������-------------------
		fileStream = new FileInputStream("if.txt");
		whileParse parser = new whileParse(fileStream);

		try {
			switch (parser.start()) {
			case 0:
				System.out.println("OK.");
				break;
			case 1:
				System.out.println("Goodbye.");
				break;
			default:
				break;
			}

		} catch (Exception e) {
			System.out.println("NOK.");
			System.out.println(e.getMessage());
			parser.ReInit(System.in);
		} catch (Error e) {
			System.out.println("Oops.");
			System.out.println(e.getMessage());

		}

		// ----------------------������ļ�output.txtд������������н��--------------
		bw = new BufferedWriter(new FileWriter(new File("output.txt")));

		// -------------����aList�����ж���������Ԫʽ���󣬲�����������output.txt
		for (int i = 0; i < aList.size(); i++) {

			str = ((struct) aList.get(i)).toString();

			bw.write(str, 0, str.length());
			bw.newLine();

		}
		// -------------�ر����������--------------------------------------------------
		bw.close();
		fileStream.close();
	}

	// ---------------------------��ʼ����-------------------------------------------
	static final public int start() throws ParseException {
		trace_call("start");
		try {
			if (jj_2_1(2)) {
				jj_consume_token(VOID);
				jj_consume_token(MAIN);
				jj_consume_token(LC);
				jj_consume_token(RC);
				jj_consume_token(LB);
				block();
				jj_consume_token(RB);
				jj_consume_token(0);
				{
					if (true) {
						return 0;
					}
				}
			} else if (jj_2_2(2)) {
				jj_consume_token(0);
				{
					if (true) {
						return 1;
					}
				}
			} else {
				jj_consume_token(-1);
				throw new ParseException();
			}
			throw new Error("Missing return statement in function");
		} finally {
			trace_return("start");
		}
	}

	// --------------main()�е�����------------------
	static final public int block() throws ParseException {
		trace_call("block");
		try {
			if (jj_2_3(2)) {
				statementstring();
				{
					if (true) {
						return 0;
					}
				}
			} else if (jj_2_4(2)) {
				jj_consume_token(0);
				{
					if (true) {
						return 1;
					}
				}
			} else {
				jj_consume_token(-1);
				throw new ParseException();
			}
			throw new Error("Missing return statement in function");
		} finally {
			trace_return("block");
		}
	}

	// ---------��䴮----------
	static final public void statementstring() throws ParseException {
		trace_call("statementstring");
		try {
			statement();
			isstatement();
		} finally {
			trace_return("statementstring");
		}
	}

	static final public void isstatement() throws ParseException {
		trace_call("isstatement");
		try {
			if (jj_2_5(2)) {
				statementstring();
			} else {
				;
			}
		} finally {
			trace_return("isstatement");
		}
	}

	// -------------���ֿ������---------------
	static final public void statement() throws ParseException {
		trace_call("statement");
		try {
			if (jj_2_6(2)) {
				IfStatement();
			} else if (jj_2_7(2)) {
				DeclareStatement();
			} else if (jj_2_8(2)) {
				ForStatement();
			} else if (jj_2_9(2)) {
				WhileStatement();
			} else if (jj_2_10(2)) {
				Switch_statement();
			} else {
				jj_consume_token(-1);
				throw new ParseException();
			}
		} finally {
			trace_return("statement");
		}
	}

	// -----------------�����͸�ֵ���--------------------------
	static final public void DeclareStatement() throws ParseException {
		trace_call("DeclareStatement");
		try {
			label_1: while (true) {
				if (jj_2_11(2)) {
					;
				} else {
					break label_1;
				}
				if (jj_2_12(2)) {
					jj_consume_token(INT);
				} else if (jj_2_13(2)) {
					jj_consume_token(CHAR);
				} else if (jj_2_14(2)) {
					jj_consume_token(FLOAT);
				} else if (jj_2_15(2)) {
					jj_consume_token(DOUBLE);
				} else {
					jj_consume_token(-1);
					throw new ParseException();
				}
				label_2: while (true) {
					if (jj_2_16(2)) {
						;
					} else {
						break label_2;
					}
					jj_consume_token(ID);
					jj_consume_token(DOU);
				}
				jj_consume_token(ID);
				jj_consume_token(FEN);
			}
			state();
			label_3: while (true) {
				if (jj_2_17(2)) {
					;
				} else {
					break label_3;
				}
				state();
			}
		} finally {
			trace_return("DeclareStatement");
		}
	}

	static final public void state() throws ParseException {
		trace_call("state");
		try {
			idstate();
		} finally {
			trace_return("state");
		}
	}

	static final public void idstate() throws ParseException {
		trace_call("idstate");
		try {
			String temp;
			String id;
			String temp1;
			id = jj_consume_token(ID).image;
			if (jj_2_18(2)) {
				jj_consume_token(ADD);
				count++;
				aList.add(new struct(count, "+", id, "1", id));
			} else if (jj_2_19(2)) {
				jj_consume_token(MINUSD);
				count++;
				aList.add(new struct(count, "-", id, "1", id));
			} else if (jj_2_20(2)) {
				jj_consume_token(EQUAL);
				temp = Expression();
				count++;

				aList.add(new struct(count, "=", temp, "_", id));
			} else {
				jj_consume_token(-1);
				throw new ParseException();
			}
			jj_consume_token(FEN);
		} finally {
			trace_return("idstate");
		}
	}

	// ---------------------------------if���-------------------------------
	static final public void IfStatement() throws ParseException {
		trace_call("IfStatement");
		try {
			int j, j1;
			jj_consume_token(IF);
			jj_consume_token(LC);
			Condition();
			jj_consume_token(RC);
			count++;
			j = count;
			aList.add(new struct(count, "J", "_", "_", "#"));
			jj_consume_token(LB);
			isstatement();
			jj_consume_token(RB);
			count++;
			j1 = count;
			aList.add(new struct(count, "J", "_", "_", "#"));
			if (jj_2_23(2)) {
				jj_consume_token(ELSE);
				if (jj_2_21(2)) {
					statement();
				} else if (jj_2_22(2)) {
					jj_consume_token(LB);
					isstatement();
					jj_consume_token(RB);
				} else {
					jj_consume_token(-1);
					throw new ParseException();
				}
				aList.set(j1 - 1, new struct(j1, "J", "_", "_", "" + (count + 1)));
				aList.set(j - 1, new struct(j, "J", "_", "_", "" + (j1 + 1)));
			} else {
				;
			}
		} finally {
			trace_return("IfStatement");
		}
	}

	// ----------------while���--------------------
	static final public void WhileStatement() throws ParseException {
		trace_call("WhileStatement");
		try {
			Token node;
			int j1;
			int j2;
			int next;
			int next1;
			jj_consume_token(WHILE);
			jj_consume_token(LC);
			next1 = count + 1;
			Condition();
			jj_consume_token(RC);
			count++;
			j1 = count;
			aList.add(new struct(count, "J", "_", "_", "#"));
			if (jj_2_24(2)) {
				statement();
			} else if (jj_2_25(2)) {
				jj_consume_token(LB);
				isstatement();
				jj_consume_token(RB);
			} else {
				jj_consume_token(-1);
				throw new ParseException();
			}
			count++;
			aList.add(new struct(count, "J", "_", "_", "" + next1));

			aList.set(j1 - 1, new struct(j1, "J", "_", "_", "" + (count + 1)));
		} finally {
			trace_return("WhileStatement");
		}
	}

	// ------------����--------------------
	static final public int Condition() throws ParseException {
		trace_call("Condition");
		try {
			Token node;
			int next;
			String result;
			String middle;
			result = Expression();
			if (jj_2_26(2)) {
				node = jj_consume_token(LT);
				middle = Expression();
				count++;
				next = count + 1;
				aList.add(new struct(count, "J<", result, middle, "" + (next + 1)));
			} else if (jj_2_27(2)) {
				node = jj_consume_token(GT);
				middle = Expression();
				count++;
				next = count + 1;
				aList.add(new struct(count, "J>", result, middle, "" + (next + 1)));
			} else if (jj_2_28(2)) {
				node = jj_consume_token(GE);
				middle = Expression();
				count++;
				next = count + 1;
				aList.add(new struct(count, "J>=", result, middle, "" + (next + 1)));
			} else if (jj_2_29(2)) {
				node = jj_consume_token(LE);
				middle = Expression();
				count++;
				next = count + 1;
				aList.add(new struct(count, "J<=", result, middle, "" + (next + 1)));
			} else {
				jj_consume_token(-1);
				throw new ParseException();
			}
			{
				if (true) {
					return next;
				}
			}
			throw new Error("Missing return statement in function");
		} finally {
			trace_return("Condition");
		}
	}

	// --------------------------�����ⲿ��Ϊ��Ա��ؼ��ĳɹ�for)----------------------
	// ----for���-------
	static final public void ForStatement() throws ParseException {
		trace_call("ForStatement");
		try {
			Token node;
			int j1;
			int j2;
			int next;
			int next1;
			jj_consume_token(FOR);
			jj_consume_token(LC);
			next1 = count + 2;
			if (jj_2_30(2)) {
				ForFirst();
			} else {
				;
			}
			jj_consume_token(FEN);
			if (jj_2_31(2)) {
				ForSecond();
			} else {
				;
			}
			jj_consume_token(FEN);
			count++;
			j1 = count;
			aList.add(new struct(count, "J", "_", "_", "#"));
			if (jj_2_32(2)) {
				ForThird();
			} else {
				;
			}
			jj_consume_token(RC);
			jj_consume_token(LB);
			isstatement();
			jj_consume_token(RB);
			count++;
			aList.add(new struct(count, "J", "_", "_", "" + next1));
			aList.set(j1 - 1, new struct(j1, "J", "_", "_", "" + (count + 1)));
		} finally {
			trace_return("ForStatement");
		}
	}

	static final public void ForFirst() throws ParseException {
		trace_call("ForFirst");
		try {
			Token node;
			String temp = "";
			String temp1 = "";
			if (jj_2_37(2)) {
				if (jj_2_33(2)) {
					jj_consume_token(INT);
				} else if (jj_2_34(2)) {
					jj_consume_token(CHAR);
				} else if (jj_2_35(2)) {
					jj_consume_token(FLOAT);
				} else if (jj_2_36(2)) {
					jj_consume_token(DOUBLE);
				} else {
					jj_consume_token(-1);
					throw new ParseException();
				}
			} else {
				;
			}
			temp = jj_consume_token(ID).image;
			if (jj_2_38(2)) {
				jj_consume_token(EQUAL);
				temp1 = Expression();
			} else {
				;
			}
			count++;
			aList.add(new struct(count, "=", temp1, "_", temp));
		} finally {
			trace_return("ForFirst");
		}
	}

	static final public int ForSecond() throws ParseException {
		trace_call("ForSecond");
		try {
			Token node;
			int next;
			String result;
			String middle;
			result = Expression();
			if (jj_2_39(2)) {
				node = jj_consume_token(LT);
				middle = Expression();
				count++;
				next = count + 1;
				aList.add(new struct(count, "J<", result, middle, "" + (next + 1)));
			} else if (jj_2_40(2)) {
				node = jj_consume_token(GT);
				middle = Expression();
				count++;
				next = count + 1;
				aList.add(new struct(count, "J>", result, middle, "" + (next + 1)));
			} else if (jj_2_41(2)) {
				node = jj_consume_token(GE);
				middle = Expression();
				count++;
				next = count + 1;
				aList.add(new struct(count, "J>=", result, middle, "" + (next + 1)));
			} else if (jj_2_42(2)) {
				node = jj_consume_token(LE);
				middle = Expression();
				count++;
				next = count + 1;
				aList.add(new struct(count, "J<=", result, middle, "" + (next + 1)));
			} else {
				jj_consume_token(-1);
				throw new ParseException();
			}
			{
				if (true) {
					return next;
				}
			}
			throw new Error("Missing return statement in function");
		} finally {
			trace_return("ForSecond");
		}
	}

	static final public void ForThird() throws ParseException {
		trace_call("ForThird");
		try {
			Token node;
			String temp = "";
			String temp1 = "";
			temp = jj_consume_token(ID).image;
			if (jj_2_43(2)) {
				jj_consume_token(ADD);
				count++;
				aList.add(new struct(count, "+", temp, "1", temp));
			} else if (jj_2_44(2)) {
				jj_consume_token(MINUSD);
				count++;
				aList.add(new struct(count, "-", temp, "1", temp));
			} else if (jj_2_45(2)) {
				jj_consume_token(EQUAL);
				temp1 = Expression();
				count++;
				aList.add(new struct(count, "=", temp1, "_", temp));
			} else {
				jj_consume_token(-1);
				throw new ParseException();
			}
		} finally {
			trace_return("ForThird");
		}
	}

	// -------------------------------��ؼ��ɹ�˽���--------------------------------

	// -------���ʽ�����мӼ���Ӧ�����ڳ˳���֮�ϣ����﷨���Ϸ������˳��θ���------------
	static final public String Expression() throws ParseException {
		trace_call("Expression");
		try {
			String result;
			String middle;
			String temp;
			result = Term();
			temp = result;
			label_4: while (true) {
				if (jj_2_46(2)) {
					;
				} else {
					break label_4;
				}
				if (jj_2_47(2)) {
					jj_consume_token(PLUS);
					middle = Term();
					count++;
					temp = "T" + ncount;
					ncount++;
					aList.add(new struct(count, "+", result, middle, temp));

					result = temp;
				} else if (jj_2_48(2)) {
					jj_consume_token(MINUS);
					middle = Term();
					count++;
					temp = "T" + ncount;
					ncount++;
					aList.add(new struct(count, "-", result, middle, temp));

					result = temp;
				} else {
					jj_consume_token(-1);
					throw new ParseException();
				}
			}
			{
				if (true) {
					return result;
				}
			}
			throw new Error("Missing return statement in function");
		} finally {
			trace_return("Expression");
		}
	}

	// ----------�˷����ʽ��λ���﷨��������-----------
	static final public String Term() throws ParseException {
		trace_call("Term");
		try {
			Token node;
			String result;
			String middle;
			String temp = "";
			result = unary();
			temp = result;
			label_5: while (true) {
				if (jj_2_49(2)) {
					;
				} else {
					break label_5;
				}
				if (jj_2_50(2)) {
					jj_consume_token(MULTIPLY);
					middle = unary();
					count++;
					temp = "T" + ncount;
					ncount++;
					aList.add(new struct(count, "*", result, middle, temp));

					result = temp;
				} else if (jj_2_51(2)) {
					jj_consume_token(DIVIDE);
					middle = unary();
					count++;
					temp = "T" + ncount;
					ncount++;
					aList.add(new struct(count, "/", result, middle, temp));

					result = temp;
				} else {
					jj_consume_token(-1);
					throw new ParseException();
				}
			}
			{
				if (true) {
					return temp;
				}
			}
			throw new Error("Missing return statement in function");
		} finally {
			trace_return("Term");
		}
	}

	static final public String unary() throws ParseException {
		trace_call("unary");
		try {
			String str;
			str = element();
			{
				if (true) {
					return str;
				}
			}
			throw new Error("Missing return statement in function");
		} finally {
			trace_return("unary");
		}
	}

	// --------����Ļ�������󡣿����ǳ����������Ǳ��ʽ��Ҳ�����Ǳ�ʾ��---------
	static final public String element() throws ParseException {
		trace_call("element");
		try {
			String str;
			Token node;
			String L_place;
			String L_offset;
			String variable;
			String temp;
			if (jj_2_52(2)) {
				node = jj_consume_token(CONSTANT);
				{
					if (true) {
						return node.image;
					}
				}
			} else if (jj_2_53(2)) {
				jj_consume_token(LC);
				str = Expression();
				jj_consume_token(RC);
				{
					if (true) {
						return str;
					}
				}
			} else if (jj_2_54(2)) {
				variable = jj_consume_token(ID).image;
				{
					if (true) {
						return variable;
					}
				}
			} else {
				jj_consume_token(-1);
				throw new ParseException();
			}
			throw new Error("Missing return statement in function");
		} finally {
			trace_return("element");
		}
	}

	// --------------------------------����Ϊ��Ա����ĳɹ�-----------------------------------------------------------------------------
	// -----switch���--------
	static final public void Switch_statement() throws ParseException {
		trace_call("Switch_statement");
		try {
			struct b = new struct(0, "", "", "", "");

			int j1;
			int j2;
			int j3 = 0;
			int j4;
			jj_consume_token(SWITCH);
			j4 = count + 1;
			jj_consume_token(LC);
			Expression();
			jj_consume_token(RC);
			jj_consume_token(LB);
			label_6: while (true) {
				jj_consume_token(CASE);
				Expression();
				count++;
				aList.add(new struct(count, "JT", "_", "_", "" + (count + 2)));
				count++;
				j1 = count;
				aList.add(new struct(count, "J", "_", "_", "#"));
				jj_consume_token(MAO);
				statement();
				count++;
				j2 = count;
				aList.add(new struct(count, "J", "_", "_", "#"));
				jj_consume_token(BREAK);
				jj_consume_token(FEN);
				aList.set(j1 - 1, new struct(j1, "J", "_", "_", "" + (count + 1)));
				if (jj_2_55(2)) {
					;
				} else {
					break label_6;
				}
			}
			jj_consume_token(_DEFAULT);
			jj_consume_token(MAO);
			statement();
			jj_consume_token(BREAK);
			count++;
			j3 = count;
			aList.add(new struct(count, "J", "_", "_", "#"));
			aList.set(j3 - 1, new struct(j3, "J", "_", "_", "" + (count + 1)));

			for (int i = j4; i < aList.size(); i++) {
				b = aList.get(i);
				if (b.situ == "#") {
					aList.set(i, new struct(i, "J", "_", "_", "" + (count + 1)));
				}
			}
			jj_consume_token(FEN);
			jj_consume_token(RB);
		} finally {
			trace_return("Switch_statement");
		}
	}

	static private boolean jj_2_1(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_1();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(0, xla);
		}
	}

	static private boolean jj_2_2(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_2();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(1, xla);
		}
	}

	static private boolean jj_2_3(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_3();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(2, xla);
		}
	}

	static private boolean jj_2_4(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_4();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(3, xla);
		}
	}

	static private boolean jj_2_5(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_5();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(4, xla);
		}
	}

	static private boolean jj_2_6(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_6();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(5, xla);
		}
	}

	static private boolean jj_2_7(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_7();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(6, xla);
		}
	}

	static private boolean jj_2_8(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_8();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(7, xla);
		}
	}

	static private boolean jj_2_9(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_9();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(8, xla);
		}
	}

	static private boolean jj_2_10(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_10();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(9, xla);
		}
	}

	static private boolean jj_2_11(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_11();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(10, xla);
		}
	}

	static private boolean jj_2_12(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_12();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(11, xla);
		}
	}

	static private boolean jj_2_13(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_13();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(12, xla);
		}
	}

	static private boolean jj_2_14(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_14();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(13, xla);
		}
	}

	static private boolean jj_2_15(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_15();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(14, xla);
		}
	}

	static private boolean jj_2_16(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_16();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(15, xla);
		}
	}

	static private boolean jj_2_17(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_17();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(16, xla);
		}
	}

	static private boolean jj_2_18(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_18();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(17, xla);
		}
	}

	static private boolean jj_2_19(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_19();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(18, xla);
		}
	}

	static private boolean jj_2_20(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_20();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(19, xla);
		}
	}

	static private boolean jj_2_21(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_21();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(20, xla);
		}
	}

	static private boolean jj_2_22(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_22();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(21, xla);
		}
	}

	static private boolean jj_2_23(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_23();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(22, xla);
		}
	}

	static private boolean jj_2_24(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_24();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(23, xla);
		}
	}

	static private boolean jj_2_25(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_25();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(24, xla);
		}
	}

	static private boolean jj_2_26(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_26();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(25, xla);
		}
	}

	static private boolean jj_2_27(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_27();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(26, xla);
		}
	}

	static private boolean jj_2_28(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_28();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(27, xla);
		}
	}

	static private boolean jj_2_29(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_29();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(28, xla);
		}
	}

	static private boolean jj_2_30(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_30();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(29, xla);
		}
	}

	static private boolean jj_2_31(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_31();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(30, xla);
		}
	}

	static private boolean jj_2_32(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_32();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(31, xla);
		}
	}

	static private boolean jj_2_33(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_33();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(32, xla);
		}
	}

	static private boolean jj_2_34(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_34();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(33, xla);
		}
	}

	static private boolean jj_2_35(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_35();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(34, xla);
		}
	}

	static private boolean jj_2_36(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_36();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(35, xla);
		}
	}

	static private boolean jj_2_37(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_37();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(36, xla);
		}
	}

	static private boolean jj_2_38(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_38();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(37, xla);
		}
	}

	static private boolean jj_2_39(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_39();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(38, xla);
		}
	}

	static private boolean jj_2_40(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_40();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(39, xla);
		}
	}

	static private boolean jj_2_41(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_41();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(40, xla);
		}
	}

	static private boolean jj_2_42(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_42();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(41, xla);
		}
	}

	static private boolean jj_2_43(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_43();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(42, xla);
		}
	}

	static private boolean jj_2_44(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_44();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(43, xla);
		}
	}

	static private boolean jj_2_45(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_45();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(44, xla);
		}
	}

	static private boolean jj_2_46(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_46();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(45, xla);
		}
	}

	static private boolean jj_2_47(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_47();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(46, xla);
		}
	}

	static private boolean jj_2_48(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_48();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(47, xla);
		}
	}

	static private boolean jj_2_49(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_49();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(48, xla);
		}
	}

	static private boolean jj_2_50(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_50();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(49, xla);
		}
	}

	static private boolean jj_2_51(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_51();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(50, xla);
		}
	}

	static private boolean jj_2_52(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_52();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(51, xla);
		}
	}

	static private boolean jj_2_53(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_53();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(52, xla);
		}
	}

	static private boolean jj_2_54(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_54();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(53, xla);
		}
	}

	static private boolean jj_2_55(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_55();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(54, xla);
		}
	}

	static private boolean jj_3_51() {
		if (jj_scan_token(DIVIDE)) {
			return true;
		}
		if (jj_3R_21()) {
			return true;
		}
		return false;
	}

	static private boolean jj_3_29() {
		if (jj_scan_token(LE)) {
			return true;
		}
		if (jj_3R_14()) {
			return true;
		}
		return false;
	}

	static private boolean jj_3_26() {
		if (jj_scan_token(LT)) {
			return true;
		}
		if (jj_3R_14()) {
			return true;
		}
		return false;
	}

	static private boolean jj_3_28() {
		if (jj_scan_token(GE)) {
			return true;
		}
		if (jj_3R_14()) {
			return true;
		}
		return false;
	}

	static private boolean jj_3_50() {
		if (jj_scan_token(MULTIPLY)) {
			return true;
		}
		if (jj_3R_21()) {
			return true;
		}
		return false;
	}

	static private boolean jj_3_49() {
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3_50()) {
			jj_scanpos = xsp;
			if (jj_3_51()) {
				return true;
			}
		}
		return false;
	}

	static private boolean jj_3_27() {
		if (jj_scan_token(GT)) {
			return true;
		}
		if (jj_3R_14()) {
			return true;
		}
		return false;
	}

	static private boolean jj_3R_20() {
		if (jj_3R_21()) {
			return true;
		}
		Token xsp;
		while (true) {
			xsp = jj_scanpos;
			if (jj_3_49()) {
				jj_scanpos = xsp;
				break;
			}
		}
		return false;
	}

	static private boolean jj_3_25() {
		if (jj_scan_token(LB)) {
			return true;
		}
		if (jj_3R_16()) {
			return true;
		}
		if (jj_scan_token(RB)) {
			return true;
		}
		return false;
	}

	static private boolean jj_3_48() {
		if (jj_scan_token(MINUS)) {
			return true;
		}
		if (jj_3R_20()) {
			return true;
		}
		return false;
	}

	static private boolean jj_3_24() {
		if (jj_3R_15()) {
			return true;
		}
		return false;
	}

	static private boolean jj_3_46() {
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3_47()) {
			jj_scanpos = xsp;
			if (jj_3_48()) {
				return true;
			}
		}
		return false;
	}

	static private boolean jj_3_47() {
		if (jj_scan_token(PLUS)) {
			return true;
		}
		if (jj_3R_20()) {
			return true;
		}
		return false;
	}

	static private boolean jj_3_22() {
		if (jj_scan_token(LB)) {
			return true;
		}
		if (jj_3R_16()) {
			return true;
		}
		if (jj_scan_token(RB)) {
			return true;
		}
		return false;
	}

	static private boolean jj_3R_14() {
		if (jj_3R_20()) {
			return true;
		}
		Token xsp;
		while (true) {
			xsp = jj_scanpos;
			if (jj_3_46()) {
				jj_scanpos = xsp;
				break;
			}
		}
		return false;
	}

	static private boolean jj_3R_11() {
		if (jj_scan_token(WHILE)) {
			return true;
		}
		if (jj_scan_token(LC)) {
			return true;
		}
		return false;
	}

	static private boolean jj_3_21() {
		if (jj_3R_15()) {
			return true;
		}
		return false;
	}

	static private boolean jj_3_45() {
		if (jj_scan_token(EQUAL)) {
			return true;
		}
		if (jj_3R_14()) {
			return true;
		}
		return false;
	}

	static private boolean jj_3_23() {
		if (jj_scan_token(ELSE)) {
			return true;
		}
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3_21()) {
			jj_scanpos = xsp;
			if (jj_3_22()) {
				return true;
			}
		}
		return false;
	}

	static private boolean jj_3_44() {
		if (jj_scan_token(MINUSD)) {
			return true;
		}
		return false;
	}

	static private boolean jj_3_43() {
		if (jj_scan_token(ADD)) {
			return true;
		}
		return false;
	}

	static private boolean jj_3R_19() {
		if (jj_scan_token(ID)) {
			return true;
		}
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3_43()) {
			jj_scanpos = xsp;
			if (jj_3_44()) {
				jj_scanpos = xsp;
				if (jj_3_45()) {
					return true;
				}
			}
		}
		return false;
	}

	static private boolean jj_3R_8() {
		if (jj_scan_token(IF)) {
			return true;
		}
		if (jj_scan_token(LC)) {
			return true;
		}
		return false;
	}

	static private boolean jj_3_38() {
		if (jj_scan_token(EQUAL)) {
			return true;
		}
		if (jj_3R_14()) {
			return true;
		}
		return false;
	}

	static private boolean jj_3_20() {
		if (jj_scan_token(EQUAL)) {
			return true;
		}
		if (jj_3R_14()) {
			return true;
		}
		return false;
	}

	static private boolean jj_3_42() {
		if (jj_scan_token(LE)) {
			return true;
		}
		if (jj_3R_14()) {
			return true;
		}
		return false;
	}

	static private boolean jj_3_19() {
		if (jj_scan_token(MINUSD)) {
			return true;
		}
		return false;
	}

	static private boolean jj_3_16() {
		if (jj_scan_token(ID)) {
			return true;
		}
		if (jj_scan_token(DOU)) {
			return true;
		}
		return false;
	}

	static private boolean jj_3_41() {
		if (jj_scan_token(GE)) {
			return true;
		}
		if (jj_3R_14()) {
			return true;
		}
		return false;
	}

	static private boolean jj_3_18() {
		if (jj_scan_token(ADD)) {
			return true;
		}
		return false;
	}

	static private boolean jj_3R_22() {
		if (jj_scan_token(ID)) {
			return true;
		}
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3_18()) {
			jj_scanpos = xsp;
			if (jj_3_19()) {
				jj_scanpos = xsp;
				if (jj_3_20()) {
					return true;
				}
			}
		}
		return false;
	}

	static private boolean jj_3_15() {
		if (jj_scan_token(DOUBLE)) {
			return true;
		}
		return false;
	}

	static private boolean jj_3_36() {
		if (jj_scan_token(DOUBLE)) {
			return true;
		}
		return false;
	}

	static private boolean jj_3_40() {
		if (jj_scan_token(GT)) {
			return true;
		}
		if (jj_3R_14()) {
			return true;
		}
		return false;
	}

	static private boolean jj_3_14() {
		if (jj_scan_token(FLOAT)) {
			return true;
		}
		return false;
	}

	static private boolean jj_3R_13() {
		if (jj_3R_22()) {
			return true;
		}
		return false;
	}

	static private boolean jj_3_35() {
		if (jj_scan_token(FLOAT)) {
			return true;
		}
		return false;
	}

	static private boolean jj_3_39() {
		if (jj_scan_token(LT)) {
			return true;
		}
		if (jj_3R_14()) {
			return true;
		}
		return false;
	}

	static private boolean jj_3_55() {
		if (jj_scan_token(CASE)) {
			return true;
		}
		if (jj_3R_14()) {
			return true;
		}
		return false;
	}

	static private boolean jj_3R_18() {
		if (jj_3R_14()) {
			return true;
		}
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3_39()) {
			jj_scanpos = xsp;
			if (jj_3_40()) {
				jj_scanpos = xsp;
				if (jj_3_41()) {
					jj_scanpos = xsp;
					if (jj_3_42()) {
						return true;
					}
				}
			}
		}
		return false;
	}

	static private boolean jj_3_17() {
		if (jj_3R_13()) {
			return true;
		}
		return false;
	}

	static private boolean jj_3_13() {
		if (jj_scan_token(CHAR)) {
			return true;
		}
		return false;
	}

	static private boolean jj_3_34() {
		if (jj_scan_token(CHAR)) {
			return true;
		}
		return false;
	}

	static private boolean jj_3_12() {
		if (jj_scan_token(INT)) {
			return true;
		}
		return false;
	}

	static private boolean jj_3R_12() {
		if (jj_scan_token(SWITCH)) {
			return true;
		}
		if (jj_scan_token(LC)) {
			return true;
		}
		return false;
	}

	static private boolean jj_3_11() {
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3_12()) {
			jj_scanpos = xsp;
			if (jj_3_13()) {
				jj_scanpos = xsp;
				if (jj_3_14()) {
					jj_scanpos = xsp;
					if (jj_3_15()) {
						return true;
					}
				}
			}
		}
		while (true) {
			xsp = jj_scanpos;
			if (jj_3_16()) {
				jj_scanpos = xsp;
				break;
			}
		}
		if (jj_scan_token(ID)) {
			return true;
		}
		return false;
	}

	static private boolean jj_3_33() {
		if (jj_scan_token(INT)) {
			return true;
		}
		return false;
	}

	static private boolean jj_3_37() {
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3_33()) {
			jj_scanpos = xsp;
			if (jj_3_34()) {
				jj_scanpos = xsp;
				if (jj_3_35()) {
					jj_scanpos = xsp;
					if (jj_3_36()) {
						return true;
					}
				}
			}
		}
		return false;
	}

	static private boolean jj_3R_9() {
		Token xsp;
		while (true) {
			xsp = jj_scanpos;
			if (jj_3_11()) {
				jj_scanpos = xsp;
				break;
			}
		}
		if (jj_3R_13()) {
			return true;
		}
		return false;
	}

	static private boolean jj_3R_17() {
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3_37()) {
			jj_scanpos = xsp;
		}
		if (jj_scan_token(ID)) {
			return true;
		}
		xsp = jj_scanpos;
		if (jj_3_38()) {
			jj_scanpos = xsp;
		}
		return false;
	}

	static private boolean jj_3_10() {
		if (jj_3R_12()) {
			return true;
		}
		return false;
	}

	static private boolean jj_3_9() {
		if (jj_3R_11()) {
			return true;
		}
		return false;
	}

	static private boolean jj_3_8() {
		if (jj_3R_10()) {
			return true;
		}
		return false;
	}

	static private boolean jj_3_7() {
		if (jj_3R_9()) {
			return true;
		}
		return false;
	}

	static private boolean jj_3_6() {
		if (jj_3R_8()) {
			return true;
		}
		return false;
	}

	static private boolean jj_3R_15() {
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3_6()) {
			jj_scanpos = xsp;
			if (jj_3_7()) {
				jj_scanpos = xsp;
				if (jj_3_8()) {
					jj_scanpos = xsp;
					if (jj_3_9()) {
						jj_scanpos = xsp;
						if (jj_3_10()) {
							return true;
						}
					}
				}
			}
		}
		return false;
	}

	static private boolean jj_3_5() {
		if (jj_3R_7()) {
			return true;
		}
		return false;
	}

	static private boolean jj_3R_16() {
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3_5()) {
			jj_scanpos = xsp;
		}
		return false;
	}

	static private boolean jj_3_32() {
		if (jj_3R_19()) {
			return true;
		}
		return false;
	}

	static private boolean jj_3R_7() {
		if (jj_3R_15()) {
			return true;
		}
		return false;
	}

	static private boolean jj_3_31() {
		if (jj_3R_18()) {
			return true;
		}
		return false;
	}

	static private boolean jj_3_53() {
		if (jj_scan_token(LC)) {
			return true;
		}
		if (jj_3R_14()) {
			return true;
		}
		return false;
	}

	static private boolean jj_3_54() {
		if (jj_scan_token(ID)) {
			return true;
		}
		return false;
	}

	static private boolean jj_3R_23() {
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3_52()) {
			jj_scanpos = xsp;
			if (jj_3_53()) {
				jj_scanpos = xsp;
				if (jj_3_54()) {
					return true;
				}
			}
		}
		return false;
	}

	static private boolean jj_3_52() {
		if (jj_scan_token(CONSTANT)) {
			return true;
		}
		return false;
	}

	static private boolean jj_3_30() {
		if (jj_3R_17()) {
			return true;
		}
		return false;
	}

	static private boolean jj_3_4() {
		if (jj_scan_token(0)) {
			return true;
		}
		return false;
	}

	static private boolean jj_3R_10() {
		if (jj_scan_token(FOR)) {
			return true;
		}
		if (jj_scan_token(LC)) {
			return true;
		}
		return false;
	}

	static private boolean jj_3_3() {
		if (jj_3R_7()) {
			return true;
		}
		return false;
	}

	static private boolean jj_3_2() {
		if (jj_scan_token(0)) {
			return true;
		}
		return false;
	}

	static private boolean jj_3R_21() {
		if (jj_3R_23()) {
			return true;
		}
		return false;
	}

	static private boolean jj_3_1() {
		if (jj_scan_token(VOID)) {
			return true;
		}
		if (jj_scan_token(MAIN)) {
			return true;
		}
		return false;
	}

	static private boolean jj_initialized_once = false;
	/** Generated Token Manager. */
	static public whileParseTokenManager token_source;
	static SimpleCharStream jj_input_stream;
	/** Current token. */
	static public Token token;
	/** Next token. */
	static public Token jj_nt;
	static private int jj_ntk;
	static private Token jj_scanpos, jj_lastpos;
	static private int jj_la;
	static private int jj_gen;
	static final private int[] jj_la1 = new int[0];
	static private int[] jj_la1_0;
	static private int[] jj_la1_1;
	static {
		jj_la1_init_0();
		jj_la1_init_1();
	}

	private static void jj_la1_init_0() {
		jj_la1_0 = new int[] {};
	}

	private static void jj_la1_init_1() {
		jj_la1_1 = new int[] {};
	}

	static final private JJCalls[] jj_2_rtns = new JJCalls[55];
	static private boolean jj_rescan = false;
	static private int jj_gc = 0;

	/** Constructor with InputStream. */
	public whileParse(java.io.InputStream stream) {
		this(stream, null);
	}

	/** Constructor with InputStream and supplied encoding */
	public whileParse(java.io.InputStream stream, String encoding) {
		if (jj_initialized_once) {
			System.out.println("ERROR: Second call to constructor of static parser.  ");
			System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
			System.out.println("       during parser generation.");
			throw new Error();
		}
		jj_initialized_once = true;
		try {
			jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1);
		} catch (java.io.UnsupportedEncodingException e) {
			throw new RuntimeException(e);
		}
		token_source = new whileParseTokenManager(jj_input_stream);
		token = new Token();
		jj_ntk = -1;
		jj_gen = 0;
		for (int i = 0; i < 0; i++) {
			jj_la1[i] = -1;
		}
		for (int i = 0; i < jj_2_rtns.length; i++) {
			jj_2_rtns[i] = new JJCalls();
		}
	}

	/** Reinitialise. */
	static public void ReInit(java.io.InputStream stream) {
		ReInit(stream, null);
	}

	/** Reinitialise. */
	static public void ReInit(java.io.InputStream stream, String encoding) {
		try {
			jj_input_stream.ReInit(stream, encoding, 1, 1);
		} catch (java.io.UnsupportedEncodingException e) {
			throw new RuntimeException(e);
		}
		token_source.ReInit(jj_input_stream);
		token = new Token();
		jj_ntk = -1;
		jj_gen = 0;
		for (int i = 0; i < 0; i++) {
			jj_la1[i] = -1;
		}
		for (int i = 0; i < jj_2_rtns.length; i++) {
			jj_2_rtns[i] = new JJCalls();
		}
	}

	/** Constructor. */
	public whileParse(java.io.Reader stream) {
		if (jj_initialized_once) {
			System.out.println("ERROR: Second call to constructor of static parser. ");
			System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
			System.out.println("       during parser generation.");
			throw new Error();
		}
		jj_initialized_once = true;
		jj_input_stream = new SimpleCharStream(stream, 1, 1);
		token_source = new whileParseTokenManager(jj_input_stream);
		token = new Token();
		jj_ntk = -1;
		jj_gen = 0;
		for (int i = 0; i < 0; i++) {
			jj_la1[i] = -1;
		}
		for (int i = 0; i < jj_2_rtns.length; i++) {
			jj_2_rtns[i] = new JJCalls();
		}
	}

	/** Reinitialise. */
	static public void ReInit(java.io.Reader stream) {
		jj_input_stream.ReInit(stream, 1, 1);
		token_source.ReInit(jj_input_stream);
		token = new Token();
		jj_ntk = -1;
		jj_gen = 0;
		for (int i = 0; i < 0; i++) {
			jj_la1[i] = -1;
		}
		for (int i = 0; i < jj_2_rtns.length; i++) {
			jj_2_rtns[i] = new JJCalls();
		}
	}

	/** Constructor with generated Token Manager. */
	public whileParse(whileParseTokenManager tm) {
		if (jj_initialized_once) {
			System.out.println("ERROR: Second call to constructor of static parser. ");
			System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
			System.out.println("       during parser generation.");
			throw new Error();
		}
		jj_initialized_once = true;
		token_source = tm;
		token = new Token();
		jj_ntk = -1;
		jj_gen = 0;
		for (int i = 0; i < 0; i++) {
			jj_la1[i] = -1;
		}
		for (int i = 0; i < jj_2_rtns.length; i++) {
			jj_2_rtns[i] = new JJCalls();
		}
	}

	/** Reinitialise. */
	public void ReInit(whileParseTokenManager tm) {
		token_source = tm;
		token = new Token();
		jj_ntk = -1;
		jj_gen = 0;
		for (int i = 0; i < 0; i++) {
			jj_la1[i] = -1;
		}
		for (int i = 0; i < jj_2_rtns.length; i++) {
			jj_2_rtns[i] = new JJCalls();
		}
	}

	static private Token jj_consume_token(int kind) throws ParseException {
		Token oldToken;
		if ((oldToken = token).next != null) {
			token = token.next;
		} else {
			token = token.next = token_source.getNextToken();
		}
		jj_ntk = -1;
		if (token.kind == kind) {
			jj_gen++;
			if (++jj_gc > 100) {
				jj_gc = 0;
				for (int i = 0; i < jj_2_rtns.length; i++) {
					JJCalls c = jj_2_rtns[i];
					while (c != null) {
						if (c.gen < jj_gen) {
							c.first = null;
						}
						c = c.next;
					}
				}
			}
			trace_token(token, "");
			return token;
		}
		token = oldToken;
		jj_kind = kind;
		throw generateParseException();
	}

	static private final class LookaheadSuccess extends java.lang.Error {
	}

	static final private LookaheadSuccess jj_ls = new LookaheadSuccess();

	static private boolean jj_scan_token(int kind) {
		if (jj_scanpos == jj_lastpos) {
			jj_la--;
			if (jj_scanpos.next == null) {
				jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
			} else {
				jj_lastpos = jj_scanpos = jj_scanpos.next;
			}
		} else {
			jj_scanpos = jj_scanpos.next;
		}
		if (jj_rescan) {
			int i = 0;
			Token tok = token;
			while ((tok != null) && (tok != jj_scanpos)) {
				i++;
				tok = tok.next;
			}
			if (tok != null) {
				jj_add_error_token(kind, i);
			}
		}
		if (jj_scanpos.kind != kind) {
			return true;
		}
		if ((jj_la == 0) && (jj_scanpos == jj_lastpos)) {
			throw jj_ls;
		}
		return false;
	}

	/** Get the next Token. */
	static final public Token getNextToken() {
		if (token.next != null) {
			token = token.next;
		} else {
			token = token.next = token_source.getNextToken();
		}
		jj_ntk = -1;
		jj_gen++;
		trace_token(token, " (in getNextToken)");
		return token;
	}

	/** Get the specific Token. */
	static final public Token getToken(int index) {
		Token t = token;
		for (int i = 0; i < index; i++) {
			if (t.next != null) {
				t = t.next;
			} else {
				t = t.next = token_source.getNextToken();
			}
		}
		return t;
	}

	static private int jj_ntk() {
		if ((jj_nt = token.next) == null) {
			return (jj_ntk = (token.next = token_source.getNextToken()).kind);
		} else {
			return (jj_ntk = jj_nt.kind);
		}
	}

	static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
	static private int[] jj_expentry;
	static private int jj_kind = -1;
	static private int[] jj_lasttokens = new int[100];
	static private int jj_endpos;

	static private void jj_add_error_token(int kind, int pos) {
		if (pos >= 100) {
			return;
		}
		if (pos == (jj_endpos + 1)) {
			jj_lasttokens[jj_endpos++] = kind;
		} else if (jj_endpos != 0) {
			jj_expentry = new int[jj_endpos];
			for (int i = 0; i < jj_endpos; i++) {
				jj_expentry[i] = jj_lasttokens[i];
			}
			jj_entries_loop: for (java.util.Iterator it = jj_expentries.iterator(); it.hasNext();) {
				int[] oldentry = (int[]) (it.next());
				if (oldentry.length == jj_expentry.length) {
					for (int i = 0; i < jj_expentry.length; i++) {
						if (oldentry[i] != jj_expentry[i]) {
							continue jj_entries_loop;
						}
					}
					jj_expentries.add(jj_expentry);
					break jj_entries_loop;
				}
			}
			if (pos != 0) {
				jj_lasttokens[(jj_endpos = pos) - 1] = kind;
			}
		}
	}

	/** Generate ParseException. */
	static public ParseException generateParseException() {
		jj_expentries.clear();
		boolean[] la1tokens = new boolean[53];
		if (jj_kind >= 0) {
			la1tokens[jj_kind] = true;
			jj_kind = -1;
		}
		for (int i = 0; i < 0; i++) {
			if (jj_la1[i] == jj_gen) {
				for (int j = 0; j < 32; j++) {
					if ((jj_la1_0[i] & (1 << j)) != 0) {
						la1tokens[j] = true;
					}
					if ((jj_la1_1[i] & (1 << j)) != 0) {
						la1tokens[32 + j] = true;
					}
				}
			}
		}
		for (int i = 0; i < 53; i++) {
			if (la1tokens[i]) {
				jj_expentry = new int[1];
				jj_expentry[0] = i;
				jj_expentries.add(jj_expentry);
			}
		}
		jj_endpos = 0;
		jj_rescan_token();
		jj_add_error_token(0, 0);
		int[][] exptokseq = new int[jj_expentries.size()][];
		for (int i = 0; i < jj_expentries.size(); i++) {
			exptokseq[i] = jj_expentries.get(i);
		}
		return new ParseException(token, exptokseq, tokenImage);
	}

	static private int trace_indent = 0;
	static private boolean trace_enabled = true;

	/** Enable tracing. */
	static final public void enable_tracing() {
		trace_enabled = true;
	}

	/** Disable tracing. */
	static final public void disable_tracing() {
		trace_enabled = false;
	}

	static private void trace_call(String s) {
		if (trace_enabled) {
			for (int i = 0; i < trace_indent; i++) {
				System.out.print(" ");
			}
			System.out.println("Call:   " + s);
		}
		trace_indent = trace_indent + 2;
	}

	static private void trace_return(String s) {
		trace_indent = trace_indent - 2;
		if (trace_enabled) {
			for (int i = 0; i < trace_indent; i++) {
				System.out.print(" ");
			}
			System.out.println("Return: " + s);
		}
	}

	static private void trace_token(Token t, String where) {
		if (trace_enabled) {
			for (int i = 0; i < trace_indent; i++) {
				System.out.print(" ");
			}
			System.out.print("Consumed token: <" + tokenImage[t.kind]);
			if ((t.kind != 0) && !tokenImage[t.kind].equals("\"" + t.image + "\"")) {
				System.out.print(": \"" + t.image + "\"");
			}
			System.out.println(" at line " + t.beginLine + " column " + t.beginColumn + ">" + where);
		}
	}

	static private void trace_scan(Token t1, int t2) {
		if (trace_enabled) {
			for (int i = 0; i < trace_indent; i++) {
				System.out.print(" ");
			}
			System.out.print("Visited token: <" + tokenImage[t1.kind]);
			if ((t1.kind != 0) && !tokenImage[t1.kind].equals("\"" + t1.image + "\"")) {
				System.out.print(": \"" + t1.image + "\"");
			}
			System.out.println(" at line " + t1.beginLine + " column " + t1.beginColumn + ">; Expected token: <" + tokenImage[t2] + ">");
		}
	}

	static private void jj_rescan_token() {
		jj_rescan = true;
		for (int i = 0; i < 55; i++) {
			try {
				JJCalls p = jj_2_rtns[i];
				do {
					if (p.gen > jj_gen) {
						jj_la = p.arg;
						jj_lastpos = jj_scanpos = p.first;
						switch (i) {
						case 0:
							jj_3_1();
							break;
						case 1:
							jj_3_2();
							break;
						case 2:
							jj_3_3();
							break;
						case 3:
							jj_3_4();
							break;
						case 4:
							jj_3_5();
							break;
						case 5:
							jj_3_6();
							break;
						case 6:
							jj_3_7();
							break;
						case 7:
							jj_3_8();
							break;
						case 8:
							jj_3_9();
							break;
						case 9:
							jj_3_10();
							break;
						case 10:
							jj_3_11();
							break;
						case 11:
							jj_3_12();
							break;
						case 12:
							jj_3_13();
							break;
						case 13:
							jj_3_14();
							break;
						case 14:
							jj_3_15();
							break;
						case 15:
							jj_3_16();
							break;
						case 16:
							jj_3_17();
							break;
						case 17:
							jj_3_18();
							break;
						case 18:
							jj_3_19();
							break;
						case 19:
							jj_3_20();
							break;
						case 20:
							jj_3_21();
							break;
						case 21:
							jj_3_22();
							break;
						case 22:
							jj_3_23();
							break;
						case 23:
							jj_3_24();
							break;
						case 24:
							jj_3_25();
							break;
						case 25:
							jj_3_26();
							break;
						case 26:
							jj_3_27();
							break;
						case 27:
							jj_3_28();
							break;
						case 28:
							jj_3_29();
							break;
						case 29:
							jj_3_30();
							break;
						case 30:
							jj_3_31();
							break;
						case 31:
							jj_3_32();
							break;
						case 32:
							jj_3_33();
							break;
						case 33:
							jj_3_34();
							break;
						case 34:
							jj_3_35();
							break;
						case 35:
							jj_3_36();
							break;
						case 36:
							jj_3_37();
							break;
						case 37:
							jj_3_38();
							break;
						case 38:
							jj_3_39();
							break;
						case 39:
							jj_3_40();
							break;
						case 40:
							jj_3_41();
							break;
						case 41:
							jj_3_42();
							break;
						case 42:
							jj_3_43();
							break;
						case 43:
							jj_3_44();
							break;
						case 44:
							jj_3_45();
							break;
						case 45:
							jj_3_46();
							break;
						case 46:
							jj_3_47();
							break;
						case 47:
							jj_3_48();
							break;
						case 48:
							jj_3_49();
							break;
						case 49:
							jj_3_50();
							break;
						case 50:
							jj_3_51();
							break;
						case 51:
							jj_3_52();
							break;
						case 52:
							jj_3_53();
							break;
						case 53:
							jj_3_54();
							break;
						case 54:
							jj_3_55();
							break;
						}
					}
					p = p.next;
				} while (p != null);
			} catch (LookaheadSuccess ls) {
			}
		}
		jj_rescan = false;
	}

	static private void jj_save(int index, int xla) {
		JJCalls p = jj_2_rtns[index];
		while (p.gen > jj_gen) {
			if (p.next == null) {
				p = p.next = new JJCalls();
				break;
			}
			p = p.next;
		}
		p.gen = (jj_gen + xla) - jj_la;
		p.first = token;
		p.arg = xla;
	}

	static final class JJCalls {
		int gen;
		Token first;
		int arg;
		JJCalls next;
	}

}
