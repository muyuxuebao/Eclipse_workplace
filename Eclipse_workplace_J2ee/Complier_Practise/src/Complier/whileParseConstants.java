/* Generated By:JavaCC: Do not edit this line. whileParseConstants.java */
package Complier;

/** 
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
@SuppressWarnings("all")
public interface whileParseConstants {

	/** End of File. */
	int EOF = 0;
	/** RegularExpression Id. */
	int GT = 7;
	/** RegularExpression Id. */
	int LT = 8;
	/** RegularExpression Id. */
	int EQ = 9;
	/** RegularExpression Id. */
	int EQUAL = 10;
	/** RegularExpression Id. */
	int LE = 11;
	/** RegularExpression Id. */
	int GE = 12;
	/** RegularExpression Id. */
	int NE = 13;
	/** RegularExpression Id. */
	int ADD = 14;
	/** RegularExpression Id. */
	int MINUSD = 15;
	/** RegularExpression Id. */
	int REM = 16;
	/** RegularExpression Id. */
	int AND = 17;
	/** RegularExpression Id. */
	int OR = 18;
	/** RegularExpression Id. */
	int FEN = 19;
	/** RegularExpression Id. */
	int DOU = 20;
	/** RegularExpression Id. */
	int DYH = 21;
	/** RegularExpression Id. */
	int MAO = 22;
	/** RegularExpression Id. */
	int CHAR = 23;
	/** RegularExpression Id. */
	int INT = 24;
	/** RegularExpression Id. */
	int FLOAT = 25;
	/** RegularExpression Id. */
	int DOUBLE = 26;
	/** RegularExpression Id. */
	int VOID = 27;
	/** RegularExpression Id. */
	int PLUS = 28;
	/** RegularExpression Id. */
	int MINUS = 29;
	/** RegularExpression Id. */
	int MULTIPLY = 30;
	/** RegularExpression Id. */
	int DIVIDE = 31;
	/** RegularExpression Id. */
	int CONSTANT = 32;
	/** RegularExpression Id. */
	int DIGIT = 33;
	/** RegularExpression Id. */
	int BREAK = 34;
	/** RegularExpression Id. */
	int CASE = 35;
	/** RegularExpression Id. */
	int _DEFAULT = 36;
	/** RegularExpression Id. */
	int DO = 37;
	/** RegularExpression Id. */
	int ELSE = 38;
	/** RegularExpression Id. */
	int FOR = 39;
	/** RegularExpression Id. */
	int IF = 40;
	/** RegularExpression Id. */
	int RETURN = 41;
	/** RegularExpression Id. */
	int SWITCH = 42;
	/** RegularExpression Id. */
	int WHILE = 43;
	/** RegularExpression Id. */
	int MAIN = 44;
	/** RegularExpression Id. */
	int LC = 45;
	/** RegularExpression Id. */
	int RC = 46;
	/** RegularExpression Id. */
	int LM = 47;
	/** RegularExpression Id. */
	int RM = 48;
	/** RegularExpression Id. */
	int LB = 49;
	/** RegularExpression Id. */
	int RB = 50;
	/** RegularExpression Id. */
	int ID = 51;
	/** RegularExpression Id. */
	int LETTER = 52;

	/** Lexical state. */
	int DEFAULT = 0;

	/** Literal token values. */
	String[] tokenImage = { "<EOF>", "\" \"", "\"\\r\"", "\"\\t\"", "\"\\n\"", "\"\\r\\n\"", "<token of kind 6>", "\">\"", "\"<\"", "\"==\"", "\"=\"", "\"<=\"", "\">=\"", "\"!=\"", "\"++\"", "\"--\"", "\"%\"", "\"&&\"", "\"||\"", "\";\"", "\",\"", "\"\\\'\"", "\":\"", "\"char\"", "\"int\"", "\"float\"", "\"double\"", "\"void\"", "\"+\"", "\"-\"", "\"*\"", "\"/\"", "<CONSTANT>", "<DIGIT>", "\"break\"", "\"case\"", "\"default\"", "\"do\"", "\"else\"", "\"for\"", "\"if\"", "\"return\"", "\"switch\"", "\"while\"", "\"main\"", "\"(\"", "\")\"", "\"[\"", "\"]\"", "\"{\"", "\"}\"", "<ID>", "<LETTER>", };

}
